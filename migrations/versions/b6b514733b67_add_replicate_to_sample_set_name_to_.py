"""Add replicate to sample, set name to free text

Revision ID: b6b514733b67
Revises: 080c1302dd11
Create Date: 2024-07-25 11:18:31.645232

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "b6b514733b67"
down_revision: Union[str, None] = "080c1302dd11"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "plotsample",
        sa.Column(
            "replicate", sa.Integer(), nullable=False, server_default="1"
        ),
    )
    op.alter_column(
        "plotsample",
        "name",
        existing_type=postgresql.ENUM("A", "B", "C", name="plotsamplenames"),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.create_unique_constraint(
        "unique_plot_sample_depth",
        "plotsample",
        ["plot_id", "replicate", "upper_depth_cm", "lower_depth_cm"],
    )
    sa.Enum("A", "B", "C", name="plotsamplenames").drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("A", "B", "C", name="plotsamplenames").create(op.get_bind())
    op.drop_constraint(
        "unique_plot_sample_depth", "plotsample", type_="unique"
    )
    op.alter_column(
        "plotsample",
        "name",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=postgresql.ENUM("A", "B", "C", name="plotsamplenames"),
        existing_nullable=False,
    )
    op.drop_column("plotsample", "replicate")
    # ### end Alembic commands ###
